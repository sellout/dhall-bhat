{-|

Create a NonEmptyList from a List as long as there is at least one element
in the List; otherwise, return None.
-}
let P =
      https://prelude.dhall-lang.org/v20.1.0/package.dhall
        sha256:26b0ef498663d269e4dc6a82b0ee289ec565d683ef4c00d0ebdd25333a5a3c98

let NonEmptyList = ./Type

let fromList =
      λ(a : Type) →
      λ(list : List a) →
        List/fold
          a
          list
          (Optional (NonEmptyList a))
          ( λ(x : a) →
            λ(acc : Optional (NonEmptyList a)) →
              P.Optional.fold
                (NonEmptyList a)
                acc
                (Optional (NonEmptyList a))
                ( λ(nel : NonEmptyList a) →
                    Some { head = x, tail = [ nel.head ] # nel.tail }
                )
                (Some { head = x, tail = [] : List a })
          )
          (None (NonEmptyList a))

let fromListWithElements =
        assert
      :   fromList Natural [ 1, 2, 3, 4, 5 ]
        ≡ Some { head = 1, tail = [ 2, 3, 4, 5 ] }

let fromEmptyList =
        assert
      :   fromList Natural ([] : List Natural)
        ≡ None { head : Natural, tail : List Natural }

in  fromList
