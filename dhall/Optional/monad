let P =
      https://prelude.dhall-lang.org/v20.1.0/package.dhall
        sha256:26b0ef498663d269e4dc6a82b0ee289ec565d683ef4c00d0ebdd25333a5a3c98

let Monad = ../Monad/Type

let map = (./functor).map

let concat =
      λ(a : Type) →
      λ(x : Optional (Optional a)) →
        P.Optional.fold
          (Optional a)
          x
          (Optional a)
          (λ(y : Optional a) → y)
          (None a)

in      ./applicative
      ∧ { bind =
            λ(a : Type) →
            λ(b : Type) →
            λ(fa : Optional a) →
            λ(k : a → Optional b) →
              concat b (map a (Optional b) k fa)
        }
    : Monad Optional
