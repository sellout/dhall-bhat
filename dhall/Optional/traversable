let P =
      https://prelude.dhall-lang.org/v20.1.0/package.dhall
        sha256:26b0ef498663d269e4dc6a82b0ee289ec565d683ef4c00d0ebdd25333a5a3c98

let Traversable = ../Traversable/Type

let Applicative = ../Applicative/Type

in      ./foldable
      ∧ ./functor
      ∧ { traverse =
            λ(f : Type → Type) →
            λ(applicative : Applicative f) →
            λ(a : Type) →
            λ(b : Type) →
            λ(g : a → f b) →
            λ(ts : Optional a) →
              P.Optional.fold
                a
                ts
                (f (Optional b))
                ( λ(x : a) →
                    applicative.map b (Optional b) (λ(y : b) → Some y) (g x)
                )
                (applicative.pure (Optional b) (None b))
        }
    : Traversable Optional
